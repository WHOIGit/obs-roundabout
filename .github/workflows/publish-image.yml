name: Create and publish a package
on:
  push:
#    branches: ['release']
    branches: ['automated_tests']

# Publish `v1.2.3` tags as releases.
    tags:
       - test
#      - v*

#  pull_request:
#    branches: [ main ]

env:
  IMAGE_NAME: ooicgsn-roundabout

jobs:
  setup-build-publish:
    name: Setup, Build, and Publish
    runs-on: ubuntu-16.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Building Docker application
        run: |
            mv .envs.example .envs
            docker-compose --file local.yml build

      - name: Starting Docker application
        run: docker-compose --file local.yml up --detach

      - name: Check for missing migrations
        run: |
          docker-compose --file local.yml run --rm django
          docker container ls
          python manage.py makemigrations --check

#      - name: Running Django system checks
#        run: |
#          docker-compose --file local.yml run --rm django 
#          python manage.py check

#      - name: Running Django tests
#        run: |
#          docker-compose --file local.yml run --rm django
#          python manage.py test

      - name: Running Automated tests
        run:  |
          google-chrome --version
          chromedriver --version
          echo node.exe version
          node -v
          echo
          docker-compose -f docker-compose-testing.yml build tests
#TEMP          docker-compose -f docker-compose-testing.yml run --rm tests ./RunAllTests-Chrome-Linux.bat

      - name: Push
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
          IMAGE_ID=ghcr.io/${{ github.repository }}
        
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
            echo $IMAGE_ID
            echo $VERSION
            
            docker tag $IMAGE_ID $IMAGE_ID:$VERSION
            docker image ls
#          docker push $IMAGE_ID:$VERSION

      - name: Stopping Docker application
        run:  docker-compose --file local.yml down



