// JavaScript source code
'use strict';
console.log('Running Add Builds Test');

// Generated by Selenium IDE
const { Builder, By, Key, until, a, WebElement, promise } = require('selenium-webdriver');
const chrome = require('selenium-webdriver/chrome');
const assert = require('assert');
const chromedriver = require('chromedriver');
const { exception } = require('console');

var driver;

(async function addBuilds() {

    driver = new Builder().forBrowser('chrome').build();

    // Step # | name | target | value
    // 1 | open | https://ooi-cgrdb-staging.whoi.net/ | 
    await driver.get("https://ooi-cgrdb-staging.whoi.net/");
    // 2 | setWindowSize | 1304x834 | 
    await driver.manage().window().setRect(1304, 834);
    // Set implict wait time in between steps
    await driver.manage().setTimeouts({ implicit: 2000 });

    try {

        // LOGIN
        await driver.findElement(By.linkText("Sign In")).click();
        await driver.findElement(By.id("id_login")).sendKeys("jkoch");
        await driver.findElement(By.id("id_password")).sendKeys("Automatedtests");
        await driver.findElement(By.css(".primaryAction")).click();

        // ADD BUILDS TEST

        // Add build with non null assembly template, build number, and location
        await driver.findElement(By.linkText("Builds")).click();
        // 4 | click | linkText=Create New Build | 
        await driver.findElement(By.linkText("Create New Build")).click();
        // 5 | select | id=id_assembly | label=Test Glider 1
        {
            const dropdown = await driver.findElement(By.id("id_assembly"));
            await dropdown.findElement(By.xpath("//option[. = 'Test Glider 1']")).click();
        }
        // 6 | select | id=id_location | label=--- Test Child
        {
            const dropdown = await driver.findElement(By.id("id_location"));
            await dropdown.findElement(By.xpath("//option[. = '--- Test Child']")).click();
        }
        // 7 | type | id=id_build_notes | This is an automated test build.
        await driver.findElement(By.id("id_build_notes")).sendKeys("This is an automated test build.");
        // 8 | click | css=.controls > .btn | 
        await driver.findElement(By.css(".controls > .btn")).click();
        // 9 | click | linkText=Create New Build | 

        // Add build with null assembly template, assembly revision, build number or location
        await driver.findElement(By.linkText("Create New Build")).click();
        // 10 | select | id=id_assembly | label=Test Glider 1
        {
            const dropdown = await driver.findElement(By.id("id_assembly"));
            await dropdown.findElement(By.xpath("//option[. = 'Test Glider 1']")).click();
        }
        // 11 | click | css=.controls > .btn | 
        await driver.findElement(By.css(".controls > .btn")).click()
        // 12 | verifyText | css=.ajax-error | This field is required.
        assert(await driver.findElement(By.css("#div_id_location .ajax-error")).getText() == "This field is required.");
        // 13 | select | id=id_location | label=Test
        {
            const dropdown = await driver.findElement(By.id("id_location"));
            // Space required before Test
            await dropdown.findElement(By.xpath("//option[. = ' Test']")).click();
        }
        // 14 | select | id=id_assembly | label=---------
        {
            const dropdown = await driver.findElement(By.id("id_assembly"))
            await dropdown.findElement(By.xpath("//option[. = '---------']")).click();
        }
        // 15 | click | css=.controls > .btn | 
        await driver.findElement(By.css(".controls > .btn")).click();
        // 16 | verifyText | css=.ajax-error | This field is required.
        assert(await driver.findElement(By.css("#div_id_assembly .ajax-error")).getText() == "This field is required.");
        // 17 | select | id=id_assembly | label=Test Glider 1
        {
            const dropdown = await driver.findElement(By.id("id_assembly"));
            await dropdown.findElement(By.xpath("//option[. = 'Test Glider 1']")).click();
        }
        // 18 | type | id=id_build_number |  
        await driver.findElement(By.id("hint_id_build_number")).click();
        await driver.findElement(By.id("id_build_number")).clear();
        // 19 | click | css=.controls > .btn | 
        await driver.findElement(By.css(".controls > .btn")).click();
        // 20 | verifyText | css=.ajax-error | This field is required.
        assert(await driver.findElement(By.css("#div_id_build_number .ajax-error")).getText() == "This field is required.");

    }
    catch (e) {
        console.log(e.message, e.stack);
        console.log("Add Builds failed.");
        throw (e);
    }
    console.log("Add Builds completed.")


})();
