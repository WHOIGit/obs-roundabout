// JavaScript source code
'use strict';
console.log('Running Add & Edit Inventory Test');

// Generated by Selenium IDE
const { Builder, By, Key, until, a, WebElement, promise } = require('selenium-webdriver');
const chrome = require('selenium-webdriver/chrome');
const assert = require('assert');
const chromedriver = require('chromedriver');
const { exception } = require('console');

var driver;

(async function addInventory() {

    driver = new Builder().forBrowser('chrome').build();

    // Step # | name | target | value
    // 1 | open | https://ooi-cgrdb-staging.whoi.net/ | 
    await driver.get("https://ooi-cgrdb-staging.whoi.net/");
    // 2 | setWindowSize | 1304x834 | 
    await driver.manage().window().setRect(1304, 834);

    try {

        // LOGIN
        await driver.findElement(By.linkText("Sign In")).click();
        await driver.findElement(By.id("id_login")).sendKeys("jkoch");
        await driver.findElement(By.id("id_password")).sendKeys("Automatedtests");
        await driver.findElement(By.css(".primaryAction")).click();

        // ADD INVENTORY TEST

        // Add Inventory with unique serial number and non null template, revision code, and location
        await driver.findElement(By.linkText("Inventory")).click();
        // 4 | click | linkText=Add Inventory | 
        await driver.findElement(By.linkText("Add Inventory")).click();
        await driver.wait(until.elementLocated(By.id("id_part_type")));
        // 5 | select | id=id_part_type | label=-- Sewing Machine
        {
            const dropdown = await driver.findElement(By.id("id_part_type"));
            await dropdown.findElement(By.xpath("//option[. = '-- Sewing Machine']")).click();
        }
        // 6 | select | id=id_part | label=Sewing Template
        {
            await driver.wait(until.elementLocated(By.id("id_part")));
            const dropdown = await driver.findElement(By.id("id_part"));
            await dropdown.findElement(By.xpath("//option[. = 'Sewing Template']")).click();
        }
        // 7 | select | id=id_location | label=Test
        {
            const dropdown = await driver.findElement(By.id("id_location"));
            // There's a space before Test in the option dropdown
            await dropdown.findElement(By.xpath("//option[. = ' Test']")).click();
        }
        // 8 | storeValue | id=id_serial_number | Serial_Number
        // Stores the value of the Serial Number assigned
        var Serial_Number = await driver.findElement(By.id("id_serial_number")).getAttribute("value");
        // 10 | click | css=.controls > .btn | 
        await driver.findElement(By.css(".controls > .btn")).click();

        // Add Inventory with blank part type, template, revision, and location
        // 11 | click | linkText=Add Inventory | 
        await driver.findElement(By.linkText("Add Inventory")).click();
        // 12 | click | id=id_part_type | 
        await driver.wait(until.elementLocated(By.id("id_part_type")));
        await driver.findElement(By.id("id_part_type")).click();
        // 13 | click | css=.controls > .btn | 
        await driver.findElement(By.css(".controls > .btn")).click();
        await driver.wait(until.elementLocated(By.css("#div_id_part .ajax-error")));
        // Wait for bug fix for blank part type error
        //assert(await driver.findElement(By.css("#div_id_part .ajax-error")).getText() == "This field is required.");
        assert(await driver.findElement(By.css("#div_id_part .ajax-error")).getText() == "This field is required.");
        assert(await driver.findElement(By.css("#div_id_revision .ajax-error")).getText() == "This field is required.");
        assert(await driver.findElement(By.css("#div_id_location .ajax-error")).getText() == "This field is required.");

        // Add Inventory item with null template
        // 14 | click | id=id_part |
        await driver.findElement(By.id("id_part")).click();
        // 15 | select | id=id_part_type | label=-- Sewing Machine
        await driver.wait(until.elementLocated(By.id("id_part_type")));
        {
            const dropdown = await driver.findElement(By.id("id_part_type"));
            await dropdown.findElement(By.xpath("//option[. = '-- Sewing Machine']")).click();
        }
        {
            const dropdown = await driver.findElement(By.id("id_location"));
            // Blank need before Test in dropdown
            await dropdown.findElement(By.xpath("//option[. = ' Test']")).click();
        }
        // 17 | select | id=id_part | label=Sewing Template
        {
            const dropdown = await driver.findElement(By.id("id_part"));
            await dropdown.findElement(By.xpath("//option[. = 'Sewing Template']")).click();
        }
        // Add Inventory item with non unique serial number
        // 18 | click | id=hint_id_serial_number | 
        await driver.findElement(By.id("hint_id_serial_number")).click();
        // 19 | click | id=id_serial_number | 
        await driver.findElement(By.id("id_serial_number")).click();
        // 20 | type | id=id_serial_number | [Serial_Number]
        // Uses stored serial number assigned above
        await driver.findElement(By.id("id_serial_number")).clear();
        await driver.findElement(By.id("id_serial_number")).sendKeys(Serial_Number);
        // 21 | click | css=.controls > .btn | 
        await driver.findElement(By.css(".controls > .btn")).click();
        // 22 | select | id=id_location | label=Test

        // 23 | click | css=.controls > .btn | 
        await driver.findElement(By.css(".controls > .btn")).click();

        await new Promise(r => setTimeout(r, 2000));
        assert(await driver.findElement(By.css("#div_id_serial_number .ajax-error")).getText() == "Inventory with this Serial number already exists.");

    // EDIT INVENTORY TEST

        // Add three Assemblies from DB
        await driver.findElement(By.linkText("Inventory")).click();
        // 4 | click | linkText=Add Inventory | 
        await driver.findElement(By.linkText("Add Inventory")).click();
        await driver.wait(until.elementLocated(By.id("id_part_type")));
        // 5 | select | id=id_part_type | label=-- Cable
        {
            const dropdown = await driver.findElement(By.id("id_part_type"));
            await dropdown.findElement(By.xpath("//option[. = '-- Electrical']")).click();
        }
        // 6 | select | id=id_part | label=6 Wire and Shield
        {
            await new Promise(r => setTimeout(r, 2000));  //only thing that works here
            const dropdown = await driver.findElement(By.id("id_part"));
            await dropdown.findElement(By.xpath("//option[. = 'CPM BOARD ASSEMBLY']")).click();
        }
        // 7 | select | id=id_location | label=--- Lost
        {
            await new Promise(r => setTimeout(r, 2000));
            const dropdown = await driver.findElement(By.id("id_location"));
            await dropdown.findElement(By.xpath("//option[. = '--- Lost']")).click();
        }
        // 8 | click | css=.controls > .btn | 
        await driver.findElement(By.css(".controls > .btn")).click();


        // 9 | click | linkText=Add Inventory | 
        await driver.findElement(By.linkText("Add Inventory")).click();
        await driver.wait(until.elementLocated(By.id("id_part_type")));
        // 10 | select | id=id_part_type | label=-- Mechanical
        {
            const dropdown = await driver.findElement(By.id("id_part_type"));
            await dropdown.findElement(By.xpath("//option[. = '-- Mechanical']")).click();
        }
        // 11 | select | id=id_part | label=PIONEER INSHORE DECK ASSEMBLY
        {
            await new Promise(r => setTimeout(r, 2000));
            const dropdown = await driver.findElement(By.id("id_part"));
            await dropdown.findElement(By.xpath("//option[. = 'PIONEER INSHORE DECK ASSEMBLY']")).click();
        }
        // 12 | select | id=id_location | label=Test
        {
            const dropdown = await driver.findElement(By.id("id_location"));
            // Space needed before Test
            await dropdown.findElement(By.xpath("//option[. = ' Test']")).click();
        }
        // 13 | click | css=.controls > .btn | 
        await driver.findElement(By.css(".controls > .btn")).click();


        // 14 | click | linkText=Add Inventory | 
        await driver.findElement(By.linkText("Add Inventory")).click();
        await driver.wait(until.elementLocated(By.id("id_part_type")));
        // 15 | select | id=id_part_type | label=-- Electrical
        {
            const dropdown = await driver.findElement(By.id("id_part_type"))
            await dropdown.findElement(By.xpath("//option[. = '-- Electrical']")).click()
        }
        // 16 | select | id=id_part | label=SOLAR PANEL MOUNT ASSEMBLY
        {
            await new Promise(r => setTimeout(r, 2000));
            const dropdown = await driver.findElement(By.id("id_part"))
            await dropdown.findElement(By.xpath("//option[. = 'SOLAR PANEL MOUNT ASSEMBLY']")).click()
        }
        // 17 | select | id=id_location | label=Test
        {
            const dropdown = await driver.findElement(By.id("id_location"));
            await dropdown.findElement(By.xpath("//option[. = ' Test']")).click();
        }
        // 18 | click | css=.controls > .btn | 
        await driver.findElement(By.css(".controls > .btn")).click();

        // Update location with null location
        // 19 | click | css=.btn-outline-primary:nth-child(1) | 
        await driver.findElement(By.css(".btn-outline-primary:nth-child(1)")).click();
        // 20 | click | id=field-select_c_r0 | 
        await driver.findElement(By.id("field-select_c_r0")).click();
        // 21 | select | id=field-select_c_r0 | label=Location
        {
            const dropdown = await driver.findElement(By.id("field-select_c_r0"));
            await dropdown.findElement(By.xpath("//option[. = 'Location']")).click();
        }
        // 22 | select | id=qfield-lookup_c_r0 | label=Exact
        {
            const dropdown = await driver.findElement(By.id("qfield-lookup_c_r0"));
            await dropdown.findElement(By.xpath("//option[. = 'Exact']")).click();
        }
        // 23 | type | id=field-query_c_r0 | Lost
        await driver.findElement(By.id("field-query_c_r0")).sendKeys("Lost");
        // 24 | click | id=searchform-submit-button | 
        await driver.findElement(By.id("searchform-submit-button")).click();
        // 25 | click | css=.even a | 
        await driver.findElement(By.css(".even a")).click();
        // 26 | click | id=action | 
        await driver.findElement(By.id("action")).click();
        // 27 | click | linkText=Location Change | 
        await driver.findElement(By.linkText("Location Change")).click();
        // 28 | select | id=id_location | label=---------
        {
            await new Promise(r => setTimeout(r, 2000));  //increase wait
            const dropdown = await driver.findElement(By.id("id_location"));
            await dropdown.findElement(By.xpath("//option[. = '---------']")).click();
        }
        // 29 | click | css=.controls > .btn-primary | 
        await new Promise(r => setTimeout(r, 2000));
        await driver.findElement(By.css(".controls > .btn-primary")).click();
        await new Promise(r => setTimeout(r, 2000));
        assert(await driver.findElement(By.css("#div_id_location .ajax-error")).getText() == "This field is required.");

        // Update location with non null location
        // 30 | select | id=id_location | label=Test
        {
            await new Promise(r => setTimeout(r, 2000));
            const dropdown = await driver.findElement(By.id("id_location"));
            await dropdown.findElement(By.xpath("//option[. = ' Test']")).click();
        }
        // 31 | click | css=.controls > .btn-primary | 
        await driver.findElement(By.css(".controls > .btn-primary")).click();
        // 32 | click | css=.btn-outline-primary:nth-child(1) | 
        await driver.findElement(By.css(".btn-outline-primary:nth-child(1)")).click();  //Search button
        // 33 | select | id=field-select_c_r0 | label=Location
        {
            const dropdown = await driver.findElement(By.id("field-select_c_r0"));
            await dropdown.findElement(By.xpath("//option[. = 'Location']")).click();
        }
        // 34 | select | id=qfield-lookup_c_r0 | label=Exact
        {
            const dropdown = await driver.findElement(By.id("qfield-lookup_c_r0"));
            await dropdown.findElement(By.xpath("//option[. = 'Exact']")).click();
        }
        // 35 | type | id=field-query_c_r0 | Test
        await driver.findElement(By.id("field-query_c_r0")).sendKeys("Test");
        // 36 | click | css=#qcard_c > .card-body | 
        await driver.findElement(By.css("#qcard_c > .card-body")).click();
        // 37 | click | id=searchform-submit-button | 
        await driver.findElement(By.id("searchform-submit-button")).click();
        // 39 | click | id=searchbar-query | 
        await driver.findElement(By.id("searchbar-query")).click(); //search within these results
        // 40 | type | id=searchbar-query | pioneer inshore deck assembly
        await driver.findElement(By.id("searchbar-query")).sendKeys("pioneer inshore deck assembly");
        // 41 | click | css=.btn-outline-primary:nth-child(1) | 
        await driver.findElement(By.css(".btn-outline-primary:nth-child(1)")).click();
        // 42 | click | css=.even a | 
        await driver.findElement(By.css(".even a")).click();
        // 43 | click | id=action | 

        // Add subassembly item to valid parent
        await driver.wait(until.elementLocated(By.id("action")));
        await driver.findElement(By.id("action")).click();
        // 44 | click | linkText=Add Sub-Assembly | 
        await driver.findElement(By.linkText("Add Sub-Assembly")).click();
        // 45 | click | linkText=Add | 
        await driver.wait(until.elementLocated(By.linkText("Add")));
        await driver.findElement(By.linkText("Add")).click();
        // 46 | click | id=action | 
        await driver.wait(until.elementLocated(By.id("action")));
        await driver.findElement(By.id("action")).click();
        // 47 | click | linkText=Add Sub-Assembly | 

        // Add another subassembly item to valid parent - no more children appear
        await driver.findElement(By.linkText("Add Sub-Assembly")).click();
        // 48 | type | id=searchbar-query | pioneer inshore deck assembly
        await driver.findElement(By.id("searchbar-query")).sendKeys("pioneer inshore deck assembly");
        // 49 | click | css=.btn-outline-primary:nth-child(1) | 
        await driver.findElement(By.xpath("//p[contains(.,'NONE')]"));
            
        // Add valid child to parent assembly
        await driver.findElement(By.id("searchbar-query")).clear();
        await driver.findElement(By.css(".btn-outline-primary:nth-child(1)")).click();  //Search button
        // 33 | select | id=field-select_c_r0 | label=Location
        {
            const dropdown = await driver.findElement(By.id("field-select_c_r0"));
            await dropdown.findElement(By.xpath("//option[. = 'Location']")).click();
        }
        // 34 | select | id=qfield-lookup_c_r0 | label=Exact
        {
            const dropdown = await driver.findElement(By.id("qfield-lookup_c_r0"));
            await dropdown.findElement(By.xpath("//option[. = 'Exact']")).click();
        }
        // 35 | type | id=field-query_c_r0 | Test
        await driver.findElement(By.id("field-query_c_r0")).clear();
        await driver.findElement(By.id("field-query_c_r0")).sendKeys("Test");

        // 31 | click | css=#qfield_\+ROW_c > .fa | 
        await driver.findElement(By.css("#qfield_\\+ROW_c > .fa")).click();
        // 33 | select | id=qfield-lookup_c_r1 | label=Exact
        {
            const dropdown = await driver.findElement(By.id("qfield-lookup_c_r1"));
            await dropdown.findElement(By.xpath("//option[. = 'Exact']")).click();
        }

        // 35 | click | id=field-query_c_r1 | 
        await driver.findElement(By.id("field-query_c_r1")).click();
        // 36 | type | id=field-query_c_r1 | CPM Board Assembly
        await driver.findElement(By.id("field-query_c_r1")).sendKeys("CPM Board Assembly");
        await driver.findElement(By.id("searchform-submit-button")).click();
        // 42 | click | css=.even a | 
        await driver.findElement(By.css(".even a")).click();
        // 43 | click | id=action |
        await driver.wait(until.elementLocated(By.id("action")));
        await driver.findElement(By.id("action")).click();
        // 52 | click | linkText=Add to Parent Assembly | 
        await driver.findElement(By.linkText("Add to Parent Assembly")).click();
        // 53 | click | linkText=Add | 
        await driver.wait(until.elementLocated(By.linkText("Add")));
        await driver.findElement(By.linkText("Add")).click();

        // Edit item dtails with null revision code
        await driver.wait(until.elementLocated(By.id("action")));
        await driver.wait(until.elementLocated(By.id("action")));
        await driver.findElement(By.id("action")).click();
        // 55 | click | linkText=Edit Inventory Details | 
        await driver.findElement(By.linkText("Edit Inventory Details")).click();
        await driver.wait(until.elementLocated(By.id("hint_id_serial_number")));
        await driver.findElement(By.id("hint_id_serial_number")).click();
        await driver.findElement(By.id("id_serial_number")).clear();
        // 56 | type | id=id_serial_number | 3604-00131-00001-20004
        await driver.findElement(By.id("id_serial_number")).sendKeys("3604-00131-00001-20004");
        // 57 | click | css=.controls > .btn-primary | 
        await driver.findElement(By.css(".controls > .btn-primary")).click();
        // 58 | select | id=id_revision | label=---------
        {
            await driver.wait(until.elementLocated(By.id("id_revision")));
            const dropdown = await driver.findElement(By.id("id_revision"));
            await dropdown.findElement(By.xpath("//option[. = '---------']")).click();
        }
        // 59 | type | id=id_serial_number | 3604-00131-00001-20003
        await driver.findElement(By.id("id_serial_number")).clear();
        await driver.findElement(By.id("id_serial_number")).sendKeys("3604-00131-00001-20004");
        // 60 | click | css=.controls > .btn-primary | 
        await driver.findElement(By.css(".controls > .btn-primary")).click();
        await new Promise(r => setTimeout(r, 2000));
        assert(await driver.findElement(By.css("#div_id_revision .ajax-error")).getText() == "This field is required.");
        assert(await driver.findElement(By.css("#div_id_serial_number .ajax-error")).getText() == "Inventory with this Serial number already exists.");


    }
    catch (e) {
        console.log(e.message, e.stack);
        console.log("Add Edit Inventory failed.");
        throw (e);
    } 
    console.log("Add Edit Inventory completed.")
    return;

})();
