// JavaScript source code
'use strict';
console.log("Running Add & Edit Locations Test.");

// Generated by Selenium IDE
const { Builder, By, Key, until, a, WebElement, promise, Capabilities } = require('selenium-webdriver');
const chrome = require('selenium-webdriver/chrome');
const firefox = require('selenium-webdriver/firefox');
const assert = require('assert');
const fs = require('fs');

var driver;
var dropdown;
var myArgs = process.argv.slice(2);
var user;
var password;

(async function testLocations() {

    let chromeCapabilities = Capabilities.chrome();
    var firefoxOptions = new firefox.Options();

    // Docker linux chrome will only run headless
    if ((myArgs[1] == 'headless') && (myArgs.length !=0)) {
    
	 chromeCapabilities.set("goog:chromeOptions", {
      	   args: [
      	    "--no-sandbox",
       	    "--disable-dev-shm-usage",
       	    "--headless",
            "--enable-logging",
            "--v=1",
	    "--disable-gpu"
     	    ]
   	    });

	  firefoxOptions.addArguments("-headless");
    } 

    // First argument specifies the Browser type
    if (myArgs[0] == 'chrome') {        
        driver = new Builder().forBrowser('chrome').withCapabilities(chromeCapabilities).build();
    }
    else if (myArgs[0] == 'firefox') {  
        driver = new Builder().forBrowser('firefox').setFirefoxOptions(firefoxOptions).build();
    } 
    else {
	console.log('Error: Missing Arguments');
    }

   if (myArgs[2] == 'admin')
    {
        await driver.get("http://localhost:8000/");
        user = "admin";
        password = "admin";
    }
    else
    {
//        await driver.get("https://ooi-cgrdb-staging.whoi.net/");
        await driver.get("https://rdb-testing.whoi.edu/");
        user = "jkoch";
        password = "Automatedtests";
    }

    // 2 | setWindowSize | 1304x834 | 
    await driver.manage().window().setRect({ width: 1304, height: 834 });

    //Hide Timer Panel when connecting to circleci local rdb django app
    if ((await driver.findElements(By.css("#djHideToolBarButton"))).length != 0)
    {
       await driver.findElement(By.css("#djHideToolBarButton")).click();
    }

    try {

        // If navbar toggler present in small screen
        try {
            var signin = await driver.findElement(By.linkText("Sign In"));
        }
        catch (NoSuchElementException) {
                await driver.findElement(By.css(".navbar-toggler-icon")).click();
         }
        // LOGIN
	await new Promise(r => setTimeout(r, 2000));
        await driver.findElement(By.linkText("Sign In")).click();
        await driver.findElement(By.id("id_login")).sendKeys(user);
        await driver.findElement(By.id("id_password")).sendKeys(password);
        await driver.findElement(By.css(".primaryAction")).click();

        // ADD LOCATIONS TEST

        // Add location with unique name
        // 10 | click | id=navbarTemplates |
        await driver.findElement(By.id("navbarTemplates")).click();
        // 11 | click | linkText=Locations | 
        await driver.findElement(By.linkText("Locations")).click();
        // 12 | click | linkText=Add Location | 
//        await new Promise(r => setTimeout(r, 6000));
	while ((await driver.findElements(By.linkText("Add Location"))).length == 0) // 1.6
	{
	   await new Promise(r => setTimeout(r, 2000));
	   console.log("Wait 2 seconds for Add Location1.");
	}
        await driver.findElement(By.linkText("Add Location")).click();
	while ((await driver.findElements(By.id("id_name"))).length == 0) // 1.6
	{
	   await new Promise(r => setTimeout(r, 2000));
	   console.log("Wait 2 seconds for Add Location1.");
	}
        // 14 | type | id=id_name | Test
        await driver.findElement(By.id("id_name")).sendKeys("Test");
        // 15 | click | css=.controls > .btn | 
        await driver.findElement(By.css(".controls > .btn")).click();

        // Add location with non-unique name
        // 16 | click | linkText=Add Location |
//	await new Promise(r => setTimeout(r, 6000)); //add for 1.6 testing
	while ((await driver.findElements(By.linkText("Edit Location"))).length == 0) //Edit button appears after element created
	{
	   await new Promise(r => setTimeout(r, 2000));
	   console.log("Wait 2 seconds for Add Location2.");
	}
        await driver.findElement(By.linkText("Add Location")).click();
        // 17 | type | id=id_name | Test
	while ((await driver.findElements(By.id("id_name"))).length == 0) // 1.6
	{
	   await new Promise(r => setTimeout(r, 2000));
	   console.log("Wait 2 seconds for Add Location2.");
	}
	//let encodedString = await driver.takeScreenshot();
	//await fs.writeFileSync('/tests/screen.png', encodedString, 'base64');      
        await driver.findElement(By.id("id_name")).sendKeys("Test");
        // 18 | click | css=.controls > .btn | 
        await driver.findElement(By.css(".controls > .btn")).click();

        // Rename to unique name for test automation
//        await new Promise(r => setTimeout(r, 6000));
	while ((await driver.findElements(By.linkText("Test"))).length == 0) 
	{
	   await new Promise(r => setTimeout(r, 2000));
	   console.log("Wait 2 seconds for Edit Location1.");
	}
        await driver.findElement(By.linkText("Test")).click();
	await new Promise(r => setTimeout(r, 6000));
        await driver.findElement(By.linkText("Edit Location")).click();
        await new Promise(r => setTimeout(r, 2000));
        // 12 | type | id=id_name | Test
        await driver.findElement(By.id("id_name")).clear();
        await driver.findElement(By.id("id_name")).sendKeys("Test1");
        // 14 | click | css=.controls > .btn | 
        await driver.findElement(By.css(".controls > .btn")).click();

        // Add child location with unique name
        // 19 | click | linkText=Add Location |
//	await new Promise(r => setTimeout(r, 6000));
	while ((await driver.findElements(By.linkText("Edit Location"))).length == 0) //Edit button appears after element created
	{
	   await new Promise(r => setTimeout(r, 2000));
	   console.log("Wait 2 seconds for Add Location3.");
	}
        await driver.findElement(By.linkText("Add Location")).click();
        await new Promise(r => setTimeout(r, 6000));
        await driver.findElement(By.id("id_name")).sendKeys("Test Child");
        // 21 | select | id=id_parent | label=Test from dropdown
        dropdown = await driver.findElement(By.id("id_parent"));
        await dropdown.findElement(By.xpath("//option[. = ' Test']")).click(); //need space before Test
        // 24 | click | css=.controls > .btn | 
        await driver.findElement(By.css(".controls > .btn")).click();

        // Add child location with name in parent group
        // 26 | click | linkText=Add Location |
//	await new Promise(r => setTimeout(r, 6000));
	while ((await driver.findElements(By.linkText("Edit Location"))).length == 0) //Edit button appears after element created
	{
	   await new Promise(r => setTimeout(r, 2000));
	   console.log("Wait 2 seconds for Add Location4.");
	}
        await driver.findElement(By.linkText("Add Location")).click();
        // 27 | type | id=id_name | Test Child
   	while ((await driver.findElements(By.id("id_name"))).length == 0) // 1.6
	{
	   await new Promise(r => setTimeout(r, 2000));
	   console.log("Wait 2 seconds for Add Location4.");
	}
        await driver.wait(until.elementLocated(By.id("id_name")));
        await driver.findElement(By.id("id_name")).sendKeys("Test Child");
        // 21 | select | id=id_parent | label=Test from dropdown
        dropdown = await driver.findElement(By.id("id_parent"));
        await dropdown.findElement(By.xpath("//option[. = ' Test']")).click(); //need space before Test
        // 24 | click | css=.controls > .btn | 
        await driver.findElement(By.css(".controls > .btn")).click();


        // EDIT LOCATIONS TEST

        // Child location renamed with name unique to parent group
//        await new Promise(r => setTimeout(r, 6000));
	while ((await driver.findElements(By.linkText("Test Child"))).length == 0)
	{
	   await new Promise(r => setTimeout(r, 2000));
	   console.log("Wait 2 seconds for Edit Location2.");
	}
        await driver.findElement(By.linkText("Test Child")).click();
        await new Promise(r => setTimeout(r, 6000));

        // 17 | click | linkText=Edit Location | 
        await driver.findElement(By.linkText("Edit Location")).click();
        // 18 | click | id=id_name | 
	while ((await driver.findElements(By.id("id_name"))).length == 0) // 1.6
	{
	   await new Promise(r => setTimeout(r, 2000));
	   console.log("Wait 2 seconds for Edit Location2.");
	}
        // 19 | type | id=id_name | Test Child1
        await driver.findElement(By.id("id_name")).clear();
        await driver.findElement(By.id("id_name")).sendKeys("Test Child1");
        // 20 | click | css=.controls > .btn | 
        await driver.findElement(By.css(".controls > .btn")).click();


        //Child location parent changed to itself
        // 25 | click | linkText=Edit Location |
//        await new Promise(r => setTimeout(r, 8000)); //increase for 1.6 testing
	while ((await driver.findElements(By.linkText("Test Child1"))).length == 0) 
	{
	   await new Promise(r => setTimeout(r, 2000));
	   console.log("Wait 2 seconds for Edit Location3.");
	}
        await driver.findElement(By.linkText("Test Child")).click();
        await new Promise(r => setTimeout(r, 4000));  
	while ((await driver.findElements(By.linkText("Edit Location"))).length == 0) 
	{
	   await new Promise(r => setTimeout(r, 2000));
	   console.log("Wait 2 seconds for Edit Location4.");
	}

        await driver.findElement(By.linkText("Edit Location")).click();
        // 26 | click | id=id_parent | 
        await new Promise(r => setTimeout(r, 2000));
        await driver.findElement(By.id("id_parent")).click();
        // 27 | select | id=id_parent | label=--- Test Child
        {
            dropdown = await driver.findElement(By.id("id_parent"));
	    await new Promise(r => setTimeout(r, 2000));
            await dropdown.findElement(By.xpath("//option[. = '--- Test Child']")).click();
        }
        // 29 | click | css=.controls > .btn | 
	//let encodedString = await driver.takeScreenshot();
	//await fs.writeFileSync('/tests/screen.png', encodedString, 'base64');     
        await driver.findElement(By.css(".controls > .btn")).click();

        await new Promise(r => setTimeout(r, 6000));

        //Verify warning message: Location Parent cannot be self
        try {
            assert(await driver.findElement(By.css("#div_id_parent .ajax-error")).getText() == "Location Parent cannot be self");
        } catch (e) {
            console.log("ERROR: Location Parent cannot be self error not found");
            throw (e);
        }

        // Close browser window
           driver.quit();
    }
    catch (e) {
        console.log(e.message, e.stack);
        console.log("Add Edit Locations failed.");
	return 1;
    }  

    console.log("Add Edit Locations completed.");
    return 0;
    

})();