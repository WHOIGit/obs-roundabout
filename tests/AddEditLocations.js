// JavaScript source code
'use strict';
console.log("Running Add & Edit Locations Test.");

// Generated by Selenium IDE
const { Builder, By, Key, until, a, WebElement, promise, Capabilities } = require('selenium-webdriver');
const chrome = require('selenium-webdriver/chrome');
const firefox = require('selenium-webdriver/firefox');
const assert = require('assert');
const fs = require('fs');

var driver;
var dropdown;
var myArgs = process.argv.slice(2);
var user;
var password;

(async function testLocations() {

    let chromeCapabilities = Capabilities.chrome();
    var firefoxOptions = new firefox.Options();

    // Docker linux chrome will only run headless
    if ((myArgs[1] == 'headless') && (myArgs.length != 0)) {

        chromeCapabilities.set("goog:chromeOptions", {
            args: [
                "--no-sandbox",
                "--disable-dev-shm-usage",
                "--headless",
                "--log-level=3",
                "--disable-gpu"
            ]
        });

        firefoxOptions.addArguments("-headless");
    }

    // First argument specifies the Browser type
    if (myArgs[0] == 'chrome') {
        driver = new Builder().forBrowser('chrome').withCapabilities(chromeCapabilities).build();
    }
    else if (myArgs[0] == 'firefox') {
        driver = new Builder().forBrowser('firefox').setFirefoxOptions(firefoxOptions).build();
    }
    else {
        console.log('Error: Missing Arguments');
    }

    try {
        if (myArgs[2] == 'admin') {
            await driver.get("http://localhost:8000/");
            user = "admin";
            password = "admin";
        }
        else {
            //await driver.get("https://ooi-cgrdb-staging.whoi.net/");
            await driver.get("https://rdb-testing.whoi.edu/");
            user = "jkoch";
            password = "Automatedtests";
        }
    }
    catch (e) {
        console.log(e.message, e.stack);
        console.log("Add Edit Locations failed.");
        return 1;
    }

    await driver.manage().window().setRect({ width: 1304, height: 834 });
    // Set implict wait time in between steps
    await driver.manage().setTimeouts({ implicit: 2000 });

    //Hide Timer Panel
    if ((await driver.findElements(By.css("#djHideToolBarButton"))).length != 0) {
        await driver.findElement(By.css("#djHideToolBarButton")).click();
    }

    try {

        // If navbar toggler present in small screen
        try {
            var signin = await driver.findElement(By.linkText("Sign In"));
        }
        catch (NoSuchElementException) {
            await driver.findElement(By.css(".navbar-toggler-icon")).click();
        }
        // LOGIN
        await new Promise(r => setTimeout(r, 2000));
        await driver.findElement(By.linkText("Sign In")).click();
        await driver.findElement(By.id("id_login")).sendKeys(user);
        await driver.findElement(By.id("id_password")).sendKeys(password);
        await driver.findElement(By.css(".primaryAction")).click();

        // ADD LOCATIONS TEST

        // Add Location Sea->Coastal Pioneer
        await driver.findElement(By.id("navbarTemplates")).click();
        await driver.findElement(By.linkText("Locations")).click();
        while ((await driver.findElements(By.linkText("Add Location"))).length == 0) {
            await new Promise(r => setTimeout(r, 2000));
            console.log("Wait 2 seconds for Add Location Coastal Pioneer.");
        }
        await driver.findElement(By.linkText("Add Location")).click();
        while ((await driver.findElements(By.id("id_name"))).length == 0) {
            await new Promise(r => setTimeout(r, 2000));
            console.log("Wait 2 seconds for Add Location5.");
        }
        await driver.wait(until.elementLocated(By.id("id_name")));
        await driver.findElement(By.id("id_name")).sendKeys("Coastal Pioneer");
        dropdown = await driver.findElement(By.id("id_parent"));
        await dropdown.findElement(By.xpath("//option[. = ' Sea']")).click(); //need space before Sea
        await driver.findElement(By.id("id_location_code")).sendKeys("CP");  // needed for depoyment bulk upload
        await driver.findElement(By.css(".controls > .btn")).click();

        // Add location with unique name
        while ((await driver.findElements(By.linkText("Edit Location"))).length == 0) //Edit button appears after element created
        {
            await new Promise(r => setTimeout(r, 2000));
            console.log("Wait 2 seconds for Add Location1.");
        }
        await driver.findElement(By.linkText("Add Location")).click();
        while ((await driver.findElements(By.id("id_name"))).length == 0) // 1.6
        {
            await new Promise(r => setTimeout(r, 2000));
            console.log("Wait 2 seconds for Add Location1.");
        }
        await driver.findElement(By.id("id_name")).sendKeys("Test");
        await driver.findElement(By.css(".controls > .btn")).click();

        // Add location with non-unique name
        while ((await driver.findElements(By.linkText("Edit Location"))).length == 0) //Edit button appears after element created
        {
            await new Promise(r => setTimeout(r, 2000));
            console.log("Wait 2 seconds for Add Location2.");
        }
        await driver.findElement(By.linkText("Add Location")).click();
        // 17 | type | id=id_name | Test
        while ((await driver.findElements(By.id("id_name"))).length == 0) // 1.6
        {
            await new Promise(r => setTimeout(r, 2000));
            console.log("Wait 2 seconds for Add Location2.");
        }
        //let encodedString = await driver.takeScreenshot();
        //await fs.writeFileSync('/tests/screen.png', encodedString, 'base64');      
        await driver.findElement(By.id("id_name")).sendKeys("Test");
        await driver.findElement(By.css(".controls > .btn")).click();

        // Rename Test to unique name for test automation
        while ((await driver.findElements(By.linkText("Edit Location"))).length == 0) {
            await new Promise(r => setTimeout(r, 2000));
            console.log("Wait 2 seconds for Edit Location1.");
        }
        await driver.findElement(By.linkText("Edit Location")).click();
        await new Promise(r => setTimeout(r, 2000));
        await driver.findElement(By.id("id_name")).clear();
        await driver.findElement(By.id("id_name")).sendKeys("Test1");
        await driver.findElement(By.css(".controls > .btn")).click();

        // Add child location with unique name
        while ((await driver.findElements(By.linkText("Edit Location"))).length == 0) //Edit button appears after element created
        {
            await new Promise(r => setTimeout(r, 2000));
            console.log("Wait 2 seconds for Add Location3.");
        }
        await driver.findElement(By.linkText("Add Location")).click();
        await new Promise(r => setTimeout(r, 6000));
        await driver.findElement(By.id("id_name")).sendKeys("Test Child");
        dropdown = await driver.findElement(By.id("id_parent"));
        await dropdown.findElement(By.xpath("//option[. = ' Test']")).click(); //need space before Test
        await driver.findElement(By.css(".controls > .btn")).click();

        // Add child location with name in parent group
        while ((await driver.findElements(By.linkText("Edit Location"))).length == 0) //Edit button appears after element created
        {
            await new Promise(r => setTimeout(r, 2000));
            console.log("Wait 2 seconds for Add Location4.");
        }
        await driver.findElement(By.linkText("Add Location")).click();
        while ((await driver.findElements(By.id("id_name"))).length == 0) // 1.6
        {
            await new Promise(r => setTimeout(r, 2000));
            console.log("Wait 2 seconds for Add Location4.");
        }
        await driver.wait(until.elementLocated(By.id("id_name")));
        await driver.findElement(By.id("id_name")).sendKeys("Test Child");
        dropdown = await driver.findElement(By.id("id_parent"));
        await dropdown.findElement(By.xpath("//option[. = ' Test']")).click(); //need space before Test
        await driver.findElement(By.css(".controls > .btn")).click();



        // EDIT LOCATIONS TEST

        // Test Child location renamed with name unique to parent group	
        while ((await driver.findElements(By.linkText("Edit Location"))).length == 0) {
            await new Promise(r => setTimeout(r, 2000));
            console.log("Wait 2 seconds for Edit Location.");
        }

        await driver.findElement(By.linkText("Edit Location")).click();  //stale element
        while ((await driver.findElements(By.id("id_name"))).length == 0) // 1.6
        {
            await new Promise(r => setTimeout(r, 2000));
            console.log("Wait 2 seconds for Edit Location2.");
        }
        await driver.findElement(By.id("id_name")).clear();
        await driver.findElement(By.id("id_name")).sendKeys("Test Child1");
        await driver.findElement(By.css(".controls > .btn")).click();

        //Child location parent changed to itself        // 25 | click | linkText=Edit Location |
        while ((await driver.findElements(By.linkText("Test Child1"))).length == 0) {
            await new Promise(r => setTimeout(r, 2000));
            console.log("Wait 2 seconds for Edit Location3.");
        }
        await driver.findElement(By.linkText("Test Child")).click();
        await new Promise(r => setTimeout(r, 4000));
        while ((await driver.findElements(By.linkText("Edit Location"))).length == 0) {
            await new Promise(r => setTimeout(r, 2000));
            console.log("Wait 2 seconds for Edit Location4.");
        }

        await driver.findElement(By.linkText("Edit Location")).click();
        await new Promise(r => setTimeout(r, 2000));
        await driver.findElement(By.id("id_parent")).click();
        {
            dropdown = await driver.findElement(By.id("id_parent"));
            await new Promise(r => setTimeout(r, 2000));
            await dropdown.findElement(By.xpath("//option[. = '--- Test Child']")).click();
        }
        //let encodedString = await driver.takeScreenshot();
        //await fs.writeFileSync('/tests/screen.png', encodedString, 'base64');     
        await driver.findElement(By.css(".controls > .btn")).click();

        await new Promise(r => setTimeout(r, 6000));

        //Verify warning message: Location Parent cannot be self
        try {
            assert(await driver.findElement(By.css("#div_id_parent .ajax-error")).getText() == "Location Parent cannot be self");
        } catch (e) {
            console.log("ERROR: Location Parent cannot be self error not found");
            throw (e);
        }

        // Close browser window
        driver.quit();
    }
    catch (e) {
        console.log(e.message, e.stack);
        console.log("Add Edit Locations failed.");
        return 1;
    }

    console.log("Add Edit Locations completed.");
    return 0;


})();
