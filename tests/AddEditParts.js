// JavaScript source code
'use strict';
console.log("Running Add & Edit Parts Test.");

// Generated by Selenium IDE
const { Builder, By, Key, until, a, WebElement, promise, Capabilities } = require('selenium-webdriver');
const chrome = require('selenium-webdriver/chrome');
const firefox = require('selenium-webdriver/firefox');
const assert = require('assert');
const fs = require('fs');

var driver;
var dropdown;
var myArgs = process.argv.slice(2);
var user;
var password;

(async function testParts() {

    let chromeCapabilities = Capabilities.chrome();
    var firefoxOptions = new firefox.Options();

    // Docker linux chrome will only run headless
    if ((myArgs[1] == 'headless') && (myArgs.length !=0)) {
    
	 chromeCapabilities.set("goog:chromeOptions", {
      	   args: [
      	    "--no-sandbox",
       	    "--disable-dev-shm-usage",
       	    "--headless",
	    "--log-level=3",
	    "--disable-gpu"
     	    ]
   	    });

	  firefoxOptions.addArguments("-headless");
    } 

    // First argument specifies the Browser type
    if (myArgs[0] == 'chrome') {        
        driver = new Builder().forBrowser('chrome').withCapabilities(chromeCapabilities).build();
    }
    else if (myArgs[0] == 'firefox') {       
        driver = new Builder().forBrowser('firefox').setFirefoxOptions(firefoxOptions).build();
    } 
    else {
	console.log('Error: Missing Arguments');
    }

   if (myArgs[2] == 'admin')
    {
        await driver.get("http://localhost:8000/");
        user = "admin";
        password = "admin";
    }
    else
    {
//        await driver.get("https://ooi-cgrdb-staging.whoi.net/");
        await driver.get("https://rdb-testing.whoi.edu/");
        user = "jkoch";
        password = "Automatedtests";
    }

    // 2 | setWindowSize | 1304x834 | 
    await driver.manage().window().setRect({ width: 1304, height: 834 });

    //Hide Timer Panel when connecting to circleci local rdb django app
    if ((await driver.findElements(By.css("#djHideToolBarButton"))).length != 0)
    {
       await driver.findElement(By.css("#djHideToolBarButton")).click();
    }

    try {

        // If navbar toggler present in small screen
        try {
            var signin = await driver.findElement(By.linkText("Sign In"));
        }
        catch (NoSuchElementException) {
                await driver.findElement(By.css(".navbar-toggler-icon")).click();
         }
        // LOGIN
        await driver.findElement(By.linkText("Sign In")).click();
        await driver.findElement(By.id("id_login")).sendKeys(user);
        await driver.findElement(By.id("id_password")).sendKeys(password);
        await driver.findElement(By.css(".primaryAction")).click();

        // ADD PARTS TEST

        console.log("Add Parts running...");
        // 10 | click | id=navbarTemplates |
        await driver.findElement(By.id("navbarAdmintools")).click();
        // 11 | click | linkText=Locations | 
        await driver.findElement(By.linkText("Edit Part Types")).click();
        // 5 | click | linkText=Test | 

        // Add Computerized Part Type
        // 5 | click | linkText=Add Part Type | 
        await driver.findElement(By.linkText("Add Part Type")).click();
        // 7 | type | id=id_name | Computerized
        await driver.findElement(By.id("id_name")).sendKeys("Computerized");
        // 8 | click | css=.btn-primary | 
        await driver.findElement(By.css(".btn-primary")).click();

        // Add a Part Type with a name
        // 5 | click | linkText=Add Part Type | 
	await new Promise(r => setTimeout(r, 2000));
        await driver.findElement(By.linkText("Add Part Type")).click();
        // 7 | type | id=id_name | Sewing Machine
        await driver.findElement(By.id("id_name")).sendKeys("Sewing Machine");
        // 8 | click | css=.btn-primary | 
        await driver.findElement(By.css(".btn-primary")).click();

        // Add Part Type with null name
        // 9 | click | linkText=Add Part Type | 
	await new Promise(r => setTimeout(r, 2000));
        await driver.findElement(By.linkText("Add Part Type")).click();
        // 10 | click | css=.btn-primary | 
        await driver.findElement(By.css(".btn-primary")).click();
        // 11 | verifyText | id=error_1_id_name | This field is required.
        assert(await driver.findElement(By.id("error_1_id_name")).getText() == "This field is required.");
        // 12 | click | css=.btn-light | 
        await driver.findElement(By.css(".btn-light")).click();

        //Add template with Part Number, Name, and Type
        // 13 | click | id=navbarTemplates | 
        await driver.findElement(By.id("navbarTemplates")).click();
        // 14 | click | linkText=Parts | 
        await driver.wait(until.elementLocated(By.linkText("Parts")));
        await driver.findElement(By.linkText("Parts")).click();
        // 15 | click | linkText=Add Part Template | 
//        await new Promise(r => setTimeout(r, 6000));
	while ((await driver.findElements(By.linkText("Add Part Template"))).length == 0) // 1.6
	{
	   await new Promise(r => setTimeout(r, 2000));
	   console.log("Wait 2 seconds for Add Part Template1.");
	}

        await driver.findElement(By.linkText("Add Part Template")).click();
        /*Get the text after ajax call*/
        // 16 | type | id=id_part_number | 123-456-789
        await new Promise(r => setTimeout(r, 2000));
        await driver.findElement(By.id("id_part_number")).sendKeys("123-456-789");
        // 17 | type | id=id_name | Sewing Template
        await driver.findElement(By.id("id_name")).sendKeys("Sewing Template");
        // 18 | type | id=id_friendly_name | sewing
        await driver.findElement(By.id("id_friendly_name")).sendKeys("sewing");
        // 19 | select | id=id_part_type | label=Sewing Machine
        {
            dropdown = await driver.findElement(By.id("id_part_type"));
            await dropdown.findElement(By.xpath("//option[. = ' Sewing Machine']")).click();
 
        }
        // 20 | click | css=.controls > .btn | 
        await driver.findElement(By.css(".controls > .btn")).click();
        await new Promise(r => setTimeout(r, 6000));

        var obj = await driver.findElements(By.xpath("//*[text()='Part with this Part number already exists.']"));	
	if (obj.length != 0)
	{
	   throw new Error("Please run the Delete Parts Test. Sewing Template already created");
	}

        // 13 | click | id=navbarTemplates | 
        await driver.findElement(By.id("navbarTemplates")).click();
        // 14 | click | linkText=Parts | 
        await driver.wait(until.elementLocated(By.linkText("Parts")));
        await driver.findElement(By.linkText("Parts")).click();
        // 15 | click | linkText=Add Part Template | 
//        await new Promise(r => setTimeout(r, 4000));
	while ((await driver.findElements(By.linkText("Add Part Template"))).length == 0) // 1.6
	{
	   await new Promise(r => setTimeout(r, 2000));
	   console.log("Wait 2 seconds for Add Part Template2.");
	}
        await driver.findElement(By.linkText("Add Part Template")).click();
        /*Get the text after ajax call*/
        // 16 | type | id=id_part_number | 123-456-789
        await new Promise(r => setTimeout(r, 2000));
        await driver.findElement(By.id("id_part_number")).sendKeys("555-456-789");
        // 17 | type | id=id_name | Sewing Template
        await driver.findElement(By.id("id_name")).sendKeys("Wheel Template");
        // 18 | type | id=id_friendly_name | sewing
        await driver.findElement(By.id("id_friendly_name")).sendKeys("wheel");
        // 19 | select | id=id_part_type | label=Sewing Machine
        {
            dropdown = await driver.findElement(By.id("id_part_type"));
            await dropdown.findElement(By.xpath("//option[. = ' Sewing Machine']")).click();

        }
        // 20 | click | css=.controls > .btn | 
        await driver.findElement(By.css(".controls > .btn")).click();
        await new Promise(r => setTimeout(r, 6000));

        var obj = await driver.findElements(By.xpath("//*[text()='Part with this Part number already exists.']"));	
	if (obj.length != 0)
	{
	   throw new Error("Please run the Delete Parts Test. Wheel Template already created");
	}

        await driver.findElement(By.id("navbarTemplates")).click();
        // 14 | click | linkText=Parts | 
        await driver.wait(until.elementLocated(By.linkText("Parts")));
        await driver.findElement(By.linkText("Parts")).click();
        // 15 | click | linkText=Add Part Template | 
//        await new Promise(r => setTimeout(r, 4000));
	while ((await driver.findElements(By.linkText("Add Part Template"))).length == 0) // 1.6
	{
	   await new Promise(r => setTimeout(r, 2000));
	   console.log("Wait 2 seconds for Add Part Template3.");
	}

        await driver.findElement(By.linkText("Add Part Template")).click();
        /*Get the text after ajax call*/
        // 16 | type | id=id_part_number | 123-456-789
        await new Promise(r => setTimeout(r, 2000));
        await driver.findElement(By.id("id_part_number")).sendKeys("666-456-789");
        // 17 | type | id=id_name | Sewing Template
        await driver.findElement(By.id("id_name")).sendKeys("Pin Template");
        // 18 | type | id=id_friendly_name | sewing
        await driver.findElement(By.id("id_friendly_name")).sendKeys("pin");
        // 19 | select | id=id_part_type | label=Sewing Machine
        {
            dropdown = await driver.findElement(By.id("id_part_type"));
            await dropdown.findElement(By.xpath("//option[. = ' Sewing Machine']")).click();

        }
        // 20 | click | css=.controls > .btn | 
        await driver.findElement(By.css(".controls > .btn")).click();
        await new Promise(r => setTimeout(r, 2000));

        var obj = await driver.findElements(By.xpath("//*[text()='Part with this Part number already exists.']"));	
	if (obj.length != 0)
	{
	   throw new Error("Please run the Delete Parts Test. Pin Template already created");
	}

        // Create new Template Revision with cost or refurbishment cost with greater than 2 decimal places.
	while ((await driver.findElements(By.id("action"))).length == 0) // 1.6
	{
	   await new Promise(r => setTimeout(r, 2000));
	   console.log("Wait 2 seconds for Add Part Template3.");
	}
        // 21 | click | id=action | 
        await driver.findElement(By.id("action")).click();

        // 22 | click | linkText=Create New Revision |
        await new Promise(r => setTimeout(r, 2000)); 
        await driver.findElement(By.linkText("Create New Revision")).click();
        // 23 | type | id=id_revision_code | B
//	await new Promise(r => setTimeout(r, 4000));   //docker element not interactable
	while ((await driver.findElements(By.id("id_revision_code"))).length == 0)
	{
	   await new Promise(r => setTimeout(r, 2000));
	   console.log("Wait 2 seconds for Create New Revision1.");
	}
	await new Promise(r => setTimeout(r, 2000));   //docker element not interactable
        await driver.findElement(By.id("id_revision_code")).sendKeys("B");
        // 24 | type | id=id_unit_cost | 3.000
        await driver.findElement(By.id("id_unit_cost")).clear();
        await driver.findElement(By.id("id_unit_cost")).sendKeys("3.000");
        // 25 | type | id=id_refurbishment_cost | 4.000
        await driver.findElement(By.id("id_refurbishment_cost")).clear();
        await driver.findElement(By.id("id_refurbishment_cost")).sendKeys("4.000");
        // 26 | click | css=.controls > .btn | 
        await driver.findElement(By.css(".controls > .btn")).click();
	await new Promise(r => setTimeout(r, 2000));

        await driver.wait(until.elementLocated(By.css("#div_id_unit_cost .ajax-error")));
        // 27 | verifyText | css=#div_id_unit_cost .ajax-error | Ensure that there are no more than 2 decimal places.
        assert(await driver.findElement(By.css("#div_id_unit_cost .ajax-error")).getText() == "Ensure that there are no more than 2 decimal places.");
        // 28 | verifyText | css=#div_id_refurbishment_cost .ajax-error | Ensure that there are no more than 2 decimal places.
        assert(await driver.findElement(By.css("#div_id_refurbishment_cost .ajax-error")).getText() == "Ensure that there are no more than 2 decimal places.");
        // 29 | type | id=id_unit_cost | 9999999999.00
        await driver.findElement(By.id("id_unit_cost")).clear();
        await driver.findElement(By.id("id_unit_cost")).sendKeys("9999999999.00");
        // 30 | click | css=.controls > .btn | 
	await new Promise(r => setTimeout(r, 2000));
        await driver.findElement(By.css(".controls > .btn")).click();
	await new Promise(r => setTimeout(r, 2000));
        await driver.wait(until.elementLocated(By.css("#div_id_unit_cost .ajax-error")));
        // 31 | verifyText | css=#div_id_unit_cost .ajax-error | Ensure that there are no more 9 digits in total.
        assert(await driver.findElement(By.css("#div_id_unit_cost .ajax-error")).getText() == "Ensure that there are no more than 9 digits in total.");

        // Create a new Template Revision with cost or refurbishment cost with 2 decimal places.
        // 32 | type | id=id_unit_cost | 3.00
        await driver.findElement(By.id("id_unit_cost")).clear();
        await driver.findElement(By.id("id_unit_cost")).sendKeys("3.00");
        await driver.switchTo().frame(0);
        await driver.switchTo().defaultContent();
        // 36 | type | id=id_refurbishment_cost | 3.74
        await driver.findElement(By.id("id_refurbishment_cost")).clear();
        await driver.findElement(By.id("id_refurbishment_cost")).sendKeys("3.74");
        // 37 | click | css=.controls > .btn | 
        await driver.findElement(By.css(".controls > .btn")).click();
//        await new Promise(r => setTimeout(r, 6000)); 
	while ((await driver.findElements(By.id("action"))).length == 0) // 1.6
	{
	   await new Promise(r => setTimeout(r, 2000));
	   console.log("Wait 2 seconds for Add Revision2.");
	}

        // Add template with null Part Number, name, type or revision code.
        // 40 | click | linkText=Add Part Template | 
        await driver.findElement(By.linkText("Add Part Template")).click();
//        await new Promise(r => setTimeout(r, 4000));
	while ((await driver.findElements(By.css(".controls > .btn"))).length == 0) // 1.6
	{
	   await new Promise(r => setTimeout(r, 2000));
	   console.log("Wait 2 seconds for Add Null Part Number.");
	}
        await driver.findElement(By.css(".controls > .btn")).click();
	await new Promise(r => setTimeout(r, 2000));

        await driver.wait(until.elementLocated(By.css("#div_id_part_number .ajax-error")));
        // 44 | verifyText | css=#div_id_part_number .ajax-error This field is required.
 	await new Promise(r => setTimeout(r, 2000));
        assert(await driver.findElement(By.css("#div_id_part_number .ajax-error")).getText() == "This field is required.");
        // 45 | verifyText | css=#div_id_name .ajax-error | This field is required.
        assert(await driver.findElement(By.css("#div_id_name .ajax-error")).getText() == "This field is required.");
        // 46 | verifyText | css=#div_id_part_type .ajax-error | This field is required.
        assert(await driver.findElement(By.css("#div_id_part_type .ajax-error")).getText() == "This field is required.");

        // Add template with same Part Number used above.
        // 47 | type | id=id_part_number | 123-456-789
        // 33 | click | id=id_refurbishment_cost | 
        await driver.findElement(By.id("id_part_number")).clear();
        await driver.findElement(By.id("id_part_number")).sendKeys("123-456-789");
        // 50 | type | id=id_name | Sewing Template
        // 33 | click | id=id_refurbishment_cost | 
        await driver.wait(until.elementLocated(By.id("id_name")));
        await driver.findElement(By.id("id_name")).clear();
        await driver.findElement(By.id("id_name")).sendKeys("Sewing Template");
        // 51 | type | id=id_friendly_name | sewing
        await driver.findElement(By.id("id_friendly_name")).clear();
        await driver.findElement(By.id("id_friendly_name")).sendKeys("sewing");
        // 52 | select | id=id_part_type | label=Sewing Machine
        dropdown = await driver.findElement(By.id("id_part_type"));
        await dropdown.findElement(By.xpath("//option[. = ' Sewing Machine']")).click();
	await new Promise(r => setTimeout(r, 2000));
        await driver.findElement(By.css(".controls > .btn")).click();
	await new Promise(r => setTimeout(r, 2000));
        await driver.wait(until.elementLocated(By.css("#div_id_part_number .ajax-error")));
        // 54 | verifyText | css=#div_id_part_number .ajax-error | Part with this Part number already exists.
        assert(await driver.findElement(By.css("#div_id_part_number .ajax-error")).getText() == "Part with this Part number already exists.");

 // EDIT PARTS TEST

        console.log("Edit Parts running...");
	// Change part type
        // 3 | click | id=navbarAdmintools |

        await driver.findElement(By.id("navbarAdmintools")).click();
        // 4 | click | linkText=Edit Part Types | 
        await driver.findElement(By.linkText("Edit Part Types")).click();
        // 5 | click | css=tr:nth-child(1) .btn-primary | 
        // Get the index to the row Sewing Machine is displayed on screen
        await new Promise(r => setTimeout(r, 2000)); 

	if ((await driver.findElements(By.xpath("//tr[*]/td[text()='Sewing Machine']"))).length != 0)
	{
            var i = 1;
            while (true) {
              if ((await driver.findElement(By.xpath("//tr["+i+"]/td")).getText()) == "Sewing Machine") { 
                  break;
              }
              i++;
	    }
        }
	else
	    console.log("Edit Parts failed: Sewing Machine type not found");
        
        await new Promise(r => setTimeout(r, 2000));
        await driver.findElement(By.css("tr:nth-child("+i+") .btn-primary")).click();

        // 6 | type | id=id_name | Sewing Machine - updated
        await driver.findElement(By.id("id_name")).clear();
        await driver.findElement(By.id("id_name")).sendKeys("Sewing Machine - Updated");
        // 8 | click | css=.btn-primary | 
        await driver.findElement(By.css(".btn-primary")).click();

        // Change part type name to null
        // 9 | verifyText | xpath=//td[contains(.,'Sewing Machine - Updated')] | Sewing Machine - updated
        await new Promise(r => setTimeout(r, 2000));

	if ((await driver.findElements(By.xpath("//tr[*]/td[text()='Sewing Machine - Updated']"))).length != 0)
	{
            var i = 1;
            while (true) {
                if ((await driver.findElement(By.xpath("//tr[" + i + "]/td")).getText()) == "Sewing Machine - Updated") {
                    break;
                }
                i++;
	    }
        }
	else
	    console.log("Edit Parts failed: Sewing Machine - Updated type not found");

        await new Promise(r => setTimeout(r, 2000));
        await driver.findElement(By.css("tr:nth-child("+i+") .btn-primary")).click();
        // 11 | type | id=id_name |  
        await driver.findElement(By.id("id_name")).clear();
        await driver.findElement(By.id("id_name")).sendKeys(" ");
        // 12 | click | css=.btn-primary | 
        await driver.findElement(By.css(".btn-primary")).click();
        // 13 | verifyText | id=error_1_id_name | This field is required.
        assert(await driver.findElement(By.id("error_1_id_name")).getText() == "This field is required.");

	// Change part type parent
        // 14 | type | id=id_name | Sewing Machine
        await driver.wait(until.elementLocated(By.id("id_name")));
        await driver.findElement(By.id("id_name")).clear();
        await driver.findElement(By.id("id_name")).sendKeys("Sewing Machine");
        // 15 | click | css=.parts | 
        await driver.findElement(By.css(".parts")).click();
        // 16 | select | id=id_parent | label=Computerized
        dropdown = await driver.findElement(By.id("id_parent"));
        await dropdown.findElement(By.xpath("//option[. = ' Computerized']")).click();
        // 17 | click | css=.btn-primary | 
        await driver.findElement(By.css(".btn-primary")).click();

        // 18 | verifyElementPresent | xpath=//td[contains(.,'Sewing Machine')] | 
        {
            await new Promise(r => setTimeout(r, 2000));
            const elements = await driver.findElements(By.xpath("//td[contains(.,\'Sewing Machine\')]"));
            assert(elements.length);
        }

        // Change part type parent back to null
        // 14 | type | id=id_name | Sewing Machine
        // Get the index to the row Sewing Machine is displayed on screen
        await new Promise(r => setTimeout(r, 2000));  //until element located not working here
        var i = 1;
        while (true) {
            if ((await driver.findElement(By.xpath("//tr[" + i + "]/td")).getText()) == "Sewing Machine") {
                break;
            }
            i++;
        }
        await new Promise(r => setTimeout(r, 2000));
        await driver.findElement(By.css("tr:nth-child(" + i + ") .btn-primary")).click();
        // 16 | select | id=id_parent | label=
        dropdown = await driver.findElement(By.id("id_parent"));
        await dropdown.findElement(By.xpath("//option[. = '---------']")).click();
        // 17 | click | css=.btn-primary | 
        await driver.findElement(By.css(".btn-primary")).click();

        // Search for Part Templates and change Part Number
        // 20 | type | id=searchbar-query | Sewing Template
        await driver.findElement(By.id("searchbar-query")).sendKeys("Sewing Template");
        // 21 | click | css=.btn-outline-primary:nth-child(1) | 
        await driver.findElement(By.css(".btn-outline-primary:nth-child(1)")).click();
        // 22 | click | linkText=123-456-789 | 
        await driver.findElement(By.linkText("123-456-789")).click();

//        await new Promise(r => setTimeout(r, 20000)); // 1.6
	while ((await driver.findElements(By.id("action"))).length == 0) // 1.6
	{
	   await new Promise(r => setTimeout(r, 2000));
	   console.log("Wait 2 seconds for Search1.");
	}

        await driver.findElement(By.id("action")).click();

        // 24 | click | linkText=Edit Part Template | 
	await new Promise(r => setTimeout(r, 2000));
        await driver.findElement(By.linkText("Edit Part Template")).click();
        // 25 | type | id=id_part_number | 789-456-123
//        await new Promise(r => setTimeout(r, 6000));
	while ((await driver.findElements(By.id("id_part_number"))).length == 0) // 1.6
	{
	   await new Promise(r => setTimeout(r, 2000));
	   console.log("Wait 2 seconds for Edit Part Template3.");
	}
        await driver.findElement(By.id("id_part_number")).clear();
        await driver.findElement(By.id("id_part_number")).sendKeys("789-456-123");
        // 26 | select | id=id_part_type | label=Computerized
        dropdown = await driver.findElement(By.id("id_part_type"));
        await dropdown.findElement(By.xpath("//option[. = ' Computerized']")).click();
        // 27 | click | css=.controls > .btn | 
        await new Promise(r => setTimeout(r, 4000));
        await driver.findElement(By.css(".controls > .btn")).click();

//        await new Promise(r => setTimeout(r, 20000));   //1.6 - update screen hasn't gone away after 14 seconds, try 20 sec!
	while ((await driver.findElements(By.id("action"))).length == 0) // 1.6
	{
	   await new Promise(r => setTimeout(r, 2000));
	   console.log("Wait 2 seconds for Edit Part Template4.");
	}  

        // Add revision
        // 28 | click | id=action | 
        await driver.findElement(By.id("action")).click();
//	await new Promise(r => setTimeout(r, 4000));
	while ((await driver.findElements(By.linkText("Create New Revision"))).length == 0) // 1.6
	{
	   await new Promise(r => setTimeout(r, 2000));
	   console.log("Wait 2 seconds for Create New Revision2.");
	}  
        // 29 | click | linkText=Create New Revision | 
        await driver.findElement(By.linkText("Create New Revision")).click();
        // 30 | type | id=id_revision_code | B
	await new Promise(r => setTimeout(r, 6000));
        await driver.findElement(By.id("id_revision_code")).sendKeys("B");
	await new Promise(r => setTimeout(r, 4000)); 
        await driver.findElement(By.css(".controls > .btn")).click();

//	await new Promise(r => setTimeout(r, 8000)); 
	while ((await driver.findElements(By.id("action"))).length == 0) // 1.6
	{
	   await new Promise(r => setTimeout(r, 2000));
	   console.log("Wait 2 seconds for New Revision2.");
	}

        // Change template to null Part Number, name, or type
        // 33 | click | id=action | 
        await driver.findElement(By.id("action")).click();
        // 34 | click | linkText=Edit Part Template | 
        await driver.findElement(By.linkText("Edit Part Template")).click();
        // 35 | type | id=id_part_number |   
//        await new Promise(r => setTimeout(r, 6000)); 
	while ((await driver.findElements(By.id("id_part_number"))).length == 0) // 1.6
	{
	   await new Promise(r => setTimeout(r, 2000));
	   console.log("Wait 2 seconds for Edit Part Template5.");
	}
        await driver.findElement(By.id("id_part_number")).click();  //stale element
        await driver.findElement(By.id("id_part_number")).clear();
        await driver.findElement(By.id("id_part_number")).sendKeys("  ");
        // 36 | type | id=id_name |   
        await driver.findElement(By.id("id_name")).clear();
        await driver.findElement(By.id("id_name")).sendKeys("  ");
        // 37 | select | id=id_part_type | label=---------
        dropdown = await driver.findElement(By.id("id_part_type"));
        await dropdown.findElement(By.xpath("//option[. = '---------']")).click();
        // 38 | click | css=.controls > .btn | 
        await driver.findElement(By.css(".controls > .btn")).click();
	await new Promise(r => setTimeout(r, 2000));
        // 39 | verifyText | css=#div_id_part_number .ajax-error | This field is required.
        await driver.wait(until.elementLocated(By.css("#div_id_part_number .ajax-error")));
        assert(await driver.findElement(By.css("#div_id_part_number .ajax-error")).getText() == "This field is required.");
        assert(await driver.findElement(By.css("#div_id_name .ajax-error")).getText() == "This field is required.");
        assert(await driver.findElement(By.css("#div_id_part_type .ajax-error")).getText() == "This field is required.");

        // 40 | type | id=id_part_number | 1232
        await new Promise(r => setTimeout(r, 2000));
        await driver.findElement(By.id("id_part_number")).clear();
        await driver.findElement(By.id("id_part_number")).sendKeys("1232");
        // 43 | type | id=id_name | Sewing Template
        await driver.findElement(By.id("id_name")).sendKeys("Sewing Template");
        // 46 | select | id=id_part_type | label=--- Sewing Machine
        dropdown = await driver.findElement(By.id("id_part_type"));
        await dropdown.findElement(By.xpath("//option[. = ' Sewing Machine']")).click();
        await new Promise(r => setTimeout(r, 2000));
        await driver.findElement(By.css(".controls > .btn")).click();
        await new Promise(r => setTimeout(r, 6000));

        var obj = await driver.findElements(By.xpath("//*[text()='Part with this Part number already exists.']"));	
	if (obj.length != 0)
	{
	   throw new Error("Please run the Delete Parts Test. Sewing Template already created");
	}

        // Edit revision with null code and invalid date
        // 48 | click | linkText=Revision: B | 
        await driver.findElement(By.linkText("Revision: B")).click();
        // 49 | click | linkText=Edit Revision | 
//        await new Promise(r => setTimeout(r, 2000));
	while ((await driver.findElements(By.linkText("Edit Revision"))).length == 0) // 1.6
	{
	   await new Promise(r => setTimeout(r, 2000));
	   console.log("Wait 2 seconds for Edit Revision3.");
	}
        await driver.findElement(By.linkText("Edit Revision")).click();
        // 50 | type | id=id_created_at |  
//        await new Promise(r => setTimeout(r, 6000));
	while ((await driver.findElements(By.id("id_revision_code"))).length == 0) // 1.6
	{
	   await new Promise(r => setTimeout(r, 2000));
	   console.log("Wait 2 seconds for Edit Revision4.");
	}
	await driver.findElement(By.id("id_revision_code")).click();  //stale element
        await driver.findElement(By.id("id_revision_code")).clear();
        await driver.findElement(By.id("id_revision_code")).sendKeys("   ");
        await driver.findElement(By.id("id_created_at")).click();
        await driver.findElement(By.id("id_created_at")).clear(); 
        // await driver.findElement(By.css(".glyphicon-trash")).click();  doesn't work
        // await driver.findElement(By.id("id_created_at")).sendKeys("0000"); doesn't work - gets converted to a valid date

        // Change unit cost or refurbishment cost to value with greater than 2 decimal places
        // 56 | type | id=id_unit_cost | 3.000
        await driver.findElement(By.id("id_unit_cost")).clear();
        await driver.findElement(By.id("id_unit_cost")).sendKeys("3.000");
        // 57 | type | id=id_refurbishment_cost | 3.560
        await driver.findElement(By.id("id_refurbishment_cost")).clear();
        await driver.findElement(By.id("id_refurbishment_cost")).sendKeys("3.560");
        // 58 | click | css=.controls > .btn | 
        await driver.findElement(By.css(".controls > .btn")).click();
	await new Promise(r => setTimeout(r, 6000));
        assert(await driver.findElement(By.css(".ajax-error")).getText() == "This field is required.");
        // 53 | type | id=id_created_at | 1
        // assert(await driver.findElement(By.css(".ajax-error")).getText() == "Enter a valid date/time.");
        // 59 | verifyText | css=#div_id_unit_cost .ajax-error | Ensure that there are no more than 2 decimal places.
        assert(await driver.findElement(By.css("#div_id_unit_cost .ajax-error")).getText() == "Ensure that there are no more than 2 decimal places.");
        // 60 | verifyText | css=#div_id_refurbishment_cost .ajax-error | Ensure that there are no more than 2 decimal places.
        assert(await driver.findElement(By.css("#div_id_refurbishment_cost .ajax-error")).getText() == "Ensure that there are no more than 2 decimal places.");

        // Close browser window
        driver.quit();
    }
    catch (e) {
        console.log(e.message, e.stack);
        console.log("Add Edit Parts failed.");
	return 1;
    } 

    console.log("Add Edit Parts completed.");
    return 0;
    

})();