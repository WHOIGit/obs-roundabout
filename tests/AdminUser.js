// JavaScript source code
'use strict';
console.log("Running Admin User Test.");

// Generated by Selenium IDE
const { Builder, By, Key, until, a, WebElement, promise, Capabilities } = require('selenium-webdriver');
const chrome = require('selenium-webdriver/chrome');
const firefox = require('selenium-webdriver/firefox');
const assert = require('assert');
const fs = require('fs');

var driver;
var myArgs = process.argv.slice(2);
var user;
var password;


(async function adminUser() {

    let chromeCapabilities = Capabilities.chrome();
    var firefoxOptions = new firefox.Options();

    // Docker linux chrome will only run headless
    if ((myArgs[1] == 'headless') && (myArgs.length != 0)) {

        chromeCapabilities.set("goog:chromeOptions", {
            args: [
                "--no-sandbox",
                "--disable-dev-shm-usage",
                "--headless",
                "--log-level=3",
                "--disable-gpu"
            ]
        });

        firefoxOptions.addArguments("-headless");
    }

    // First argument specifies the Browser type
    if (myArgs[0] == 'chrome') {
        driver = new Builder().forBrowser('chrome').withCapabilities(chromeCapabilities).build();
    }
    else if (myArgs[0] == 'firefox') {
        driver = new Builder().forBrowser('firefox').setFirefoxOptions(firefoxOptions).build();
    }
    else {
        console.log('Error: Missing Arguments');
    }

    if (myArgs[2] == 'admin') {
        await driver.get("http://localhost:8000/");
        user = "admin";
        password = "admin";
    }
    else {
        //        await driver.get("https://ooi-cgrdb-staging.whoi.net/");
        await driver.get("https://rdb-testing.whoi.edu/");
        user = "jkoch";
        password = "Automatedtests";
    }

    // 2 | setWindowSize | 1304x834 | 
    await driver.manage().window().setRect({ width: 1304, height: 834 });
    // Set implict wait time in between steps
    await driver.manage().setTimeouts({ implicit: 2000 });

    //Hide Timer Panel when connecting to circleci local rdb django app
    if ((await driver.findElements(By.css("#djHideToolBarButton"))).length != 0) {
        await driver.findElement(By.css("#djHideToolBarButton")).click();
    }

    try {

        // If navbar toggler present in small screen
        try {
            var signin = await driver.findElement(By.linkText("Sign In"));
        }
        catch (NoSuchElementException) {
            await driver.findElement(By.css(".navbar-toggler-icon")).click();
        }
        // LOGIN
        await driver.findElement(By.linkText("Sign In")).click();
        await driver.findElement(By.id("id_login")).sendKeys(user);
        await driver.findElement(By.id("id_password")).sendKeys(password);
        await driver.findElement(By.css(".primaryAction")).click();

        // ADMIN USER TEST

	    // Add Technician & Inventory Role Users
        await driver.findElement(By.linkText("Users")).click()
        await driver.findElement(By.linkText("Add User")).click()
        await driver.findElement(By.id("id_username")).sendKeys("tech")
        await driver.findElement(By.id("id_password")).sendKeys("tech")
        await driver.findElement(By.id("id_groups_1")).click()
        await driver.findElement(By.css(".btn-primary")).click()
        while ((await driver.findElements(By.linkText("Edit"))).length == 0) {
            await new Promise(r => setTimeout(r, 2000));
            console.log("Wait 2 seconds for Add User1.");
        }

        await driver.findElement(By.linkText("Users")).click()
        await driver.findElement(By.linkText("Add User")).click()
        await driver.findElement(By.id("id_username")).sendKeys("inv")
        await driver.findElement(By.id("id_password")).sendKeys("inv")
        await driver.findElement(By.id("id_groups_2")).click()
        await driver.findElement(By.css(".btn-primary")).click()
        while ((await driver.findElements(By.linkText("Edit"))).length == 0) {
            await new Promise(r => setTimeout(r, 2000));
            console.log("Wait 2 seconds for Add User2.");
        }

	    // Sign out as ADMIN and sign in as each new User to verify adding accounts worked
        await driver.findElement(By.linkText("Sign Out")).click()
        await driver.findElement(By.css(".btn-danger")).click()
        while ((await driver.findElements(By.id("log-in-link"))).length == 0) {
            await new Promise(r => setTimeout(r, 2000));
            console.log("Wait 2 seconds for Login.");
        }
        await driver.findElement(By.id("log-in-link")).click()
        await driver.findElement(By.id("id_login")).sendKeys("tech")
        await driver.findElement(By.id("id_password")).sendKeys("tech")
        await driver.findElement(By.css(".primaryAction")).click()
	    // Wait for Sign Out menu option to verify login
        while ((await driver.findElements(By.linkText("Sign Out"))).length == 0) {
            await new Promise(r => setTimeout(r, 2000));
            console.log("Wait 2 seconds for Sign Out1.");
        }

        await driver.findElement(By.linkText("Sign Out")).click()
        await driver.findElement(By.css(".btn-danger")).click()
        await driver.findElement(By.id("log-in-link")).click()
        await driver.findElement(By.id("id_login")).sendKeys("inv")
        await driver.findElement(By.id("id_password")).sendKeys("inv")
        await driver.findElement(By.id("id_remember")).click()
        await driver.findElement(By.css(".primaryAction")).click()
	    // Wait for Sign Out menu option to verify login
        while ((await driver.findElements(By.linkText("Sign Out"))).length == 0) {
            await new Promise(r => setTimeout(r, 2000));
            console.log("Wait 2 seconds for Sign Out2.");
        }
        await driver.findElement(By.linkText("Sign Out")).click()
        await driver.findElement(By.css(".btn-danger")).click()
        await driver.findElement(By.id("log-in-link")).click()
        await driver.findElement(By.id("id_login")).sendKeys("admin")
        await driver.findElement(By.id("id_password")).sendKeys("admin")
        await driver.findElement(By.css(".primaryAction")).click()

	    // Suspend Users and try to login
        await driver.findElement(By.linkText("Users")).click()
        await driver.findElement(By.linkText("inv")).click()
        await driver.findElement(By.linkText("Suspend User")).click()
        await driver.findElement(By.linkText("Users")).click()
        await driver.findElement(By.linkText("tech")).click()
        await driver.findElement(By.linkText("Suspend User")).click()
        await driver.findElement(By.linkText("Sign Out")).click()
        await driver.findElement(By.css(".btn-danger")).click()

	    // Try to login, should fail
        await driver.findElement(By.id("log-in-link")).click()
        await driver.findElement(By.id("id_login")).sendKeys("tech")
        await driver.findElement(By.id("id_password")).sendKeys("tech")
        await driver.findElement(By.css(".primaryAction")).click()
	    // Verify "Account Inactive"
        var bodyText = await driver.findElement(By.tagName("Body")).getText();
        assert(bodyText.includes("Account Inactive"));

        await driver.findElement(By.id("log-in-link")).click()
        await driver.findElement(By.id("id_login")).sendKeys("inv")
        await driver.findElement(By.id("id_password")).sendKeys("inv")
        await driver.findElement(By.css(".primaryAction")).click()
	    // Verify "Account Inactive"
        bodyText = await driver.findElement(By.tagName("Body")).getText();
        assert(bodyText.includes("Account Inactive"));

        await driver.findElement(By.id("log-in-link")).click()
        await driver.findElement(By.id("id_login")).sendKeys("admin")
        await driver.findElement(By.id("id_password")).sendKeys("admin")
        await driver.findElement(By.css(".primaryAction")).click()

	    // Activate users and try to login
        await driver.findElement(By.linkText("Users")).click()
        await driver.findElement(By.linkText("inv")).click()
        await driver.findElement(By.linkText("Activate User")).click()
        await driver.findElement(By.linkText("Users")).click()
        await driver.findElement(By.linkText("tech")).click()
        await driver.findElement(By.linkText("Activate User")).click()
        await driver.findElement(By.linkText("Sign Out")).click()
        await driver.findElement(By.css(".btn-danger")).click()

        await driver.findElement(By.id("log-in-link")).click()
        await driver.findElement(By.id("id_login")).sendKeys("inv")
        await driver.findElement(By.id("id_password")).sendKeys("inv")
        await driver.findElement(By.css(".primaryAction")).click()
	    // Wait for Sign Out menu option to verify login
        while ((await driver.findElements(By.linkText("Sign Out"))).length == 0) {
            await new Promise(r => setTimeout(r, 2000));
            console.log("Wait 2 seconds for Sign Out3.");
        }

        await driver.findElement(By.linkText("Sign Out")).click()
        await driver.findElement(By.css(".btn-danger")).click()
        await driver.findElement(By.id("log-in-link")).click()
        await driver.findElement(By.id("id_login")).sendKeys("tech")
        await driver.findElement(By.id("id_password")).sendKeys("tech")
        await driver.findElement(By.css(".primaryAction")).click()

	    // Modify My Info
        await driver.findElement(By.linkText("My Info")).click()
        await driver.findElement(By.id("id_name")).sendKeys("best technician")
        await driver.findElement(By.css(".btn-primary")).click() 
	    // Verify my info changed
        bodyText = await driver.findElement(By.tagName("Body")).getText();
        assert(bodyText.includes("best technician"));

	    // Modify Email
        await driver.findElement(By.linkText("E-Mail")).click()
        await driver.findElement(By.id("id_email")).sendKeys("tech@example.com")
        await driver.findElement(By.name("action_add")).click()
	    // Verify screen text contains tech@example.com
        bodyText = await driver.findElement(By.tagName("Body")).getText();
        assert(bodyText.includes("tech@example.com"));

	    // Modify Password
        await driver.findElement(By.linkText("My Profile")).click()
        await driver.findElement(By.linkText("Change Password")).click()
        await driver.findElement(By.id("id_oldpassword")).sendKeys("tech")
        await driver.findElement(By.id("id_password1")).sendKeys("tech1234")
        await driver.findElement(By.id("id_password2")).sendKeys("tech1234")
        await driver.findElement(By.name("action")).click()
        await driver.findElement(By.linkText("Sign Out")).click()
        await driver.findElement(By.css(".btn-danger")).click()

	    // Log back in with new Password
        await driver.findElement(By.id("log-in-link")).click()
        await driver.findElement(By.id("id_login")).sendKeys("tech")
        await driver.findElement(By.id("id_password")).click()
        await driver.findElement(By.id("id_password")).sendKeys("tech1234")
        await driver.findElement(By.css(".primaryAction")).click()
        // Wait for Sign Out menu option to verify login
        while ((await driver.findElements(By.linkText("Sign Out"))).length == 0) {
            await new Promise(r => setTimeout(r, 2000));
            console.log("Wait 2 seconds for Sign Out4.");
        }

        // Close browser window
        driver.quit();

    }
    catch (e) {
        console.log(e.message, e.stack);
        console.log("Admin User failed.");
        return 1;
    }
    console.log("Admin User completed.");
    return 0;

})();
