// JavaScript source code
'use strict';
console.log("Running Retire Builds Test.");

// Generated by Selenium IDE
const { Builder, By, Key, until, a, WebElement, promise, Capabilities } = require('selenium-webdriver');
const chrome = require('selenium-webdriver/chrome');
const firefox = require('selenium-webdriver/firefox');
const assert = require('assert');

var driver;
var myArgs = process.argv.slice(2);
var user;
var password;

(async function retireBuilds() {

    let chromeCapabilities = Capabilities.chrome();
    var firefoxOptions = new firefox.Options();

    // Docker linux chrome will only run headless
    if ((myArgs[1] == 'headless') && (myArgs.length !=0)) {
    
	 chromeCapabilities.set("goog:chromeOptions", {
      	   args: [
      	    "--no-sandbox",
       	    "--disable-dev-shm-usage",
       	    "--headless",
	        "--log-level=3",
	        "--disable-gpu"
     	    ]
   	    });

	  firefoxOptions.addArguments("-headless");
    } 

    // First argument specifies the Browser type
    if (myArgs[0] == 'chrome') {        
        driver = new Builder().forBrowser('chrome').withCapabilities(chromeCapabilities).build();
    }
    else if (myArgs[0] == 'firefox') {       
        driver = new Builder().forBrowser('firefox').setFirefoxOptions(firefoxOptions).build();
    } 
    else {
	console.log('Error: Missing Arguments');
    }

   if (myArgs[2] == 'admin')
    {
        await driver.get("http://localhost:8000/");
        user = "admin";
        password = "admin";
    }
    else
    {
//        await driver.get("https://ooi-cgrdb-staging.whoi.net/");
        await driver.get("https://rdb-testing.whoi.edu/");
        user = "jkoch";
        password = "Automatedtests";
    }

    // 2 | setWindowSize | 1304x834 | 
    await driver.manage().window().setRect({ width: 1304, height: 834 });
    // Set implict wait time in between steps
    await driver.manage().setTimeouts({ implicit: 20000 });

    //Hide Timer Panel when connecting to circleci local rdb django app
    if ((await driver.findElements(By.css("#djHideToolBarButton"))).length != 0)
    {
       await driver.findElement(By.css("#djHideToolBarButton")).click();
    }

    try {

        // If navbar toggler present in small screen
        try {
            var signin = await driver.findElement(By.linkText("Sign In"));
        }
        catch (NoSuchElementException) {
                await driver.findElement(By.css(".navbar-toggler-icon")).click();
         }
        // LOGIN
        await driver.findElement(By.linkText("Sign In")).click();
        await driver.findElement(By.id("id_login")).sendKeys(user);
        await driver.findElement(By.id("id_password")).sendKeys(password);
        await driver.findElement(By.css(".primaryAction")).click();
        await new Promise(r => setTimeout(r, 2000));

        // RETIRE BUILDS TEST

        // Retire Builds added during the Add Builds test.
        await driver.findElement(By.linkText("Builds")).click();
        await driver.findElement(By.css(".btn-outline-primary:nth-child(1)")).click(); // search for all builds
	while ((await driver.findElements(By.id("field-select_c_r0"))).length == 0)
        {
	   await new Promise(r => setTimeout(r, 2000));
	   console.log("Wait 2 seconds for Search1.");
	}

        if ((await driver.findElements(By.css(".even:nth-child(1) a"))).length != 0)
        {
	    await driver.findElement(By.css(".even:nth-child(1) a")).click();

	    // RECOVER FROM FIELD, END DEPLOYMENT, AND RETIRE BUILD
	    while ((await driver.findElements(By.id("action"))).length == 0)
	   {
	      await new Promise(r => setTimeout(r, 2000));
	      console.log("Wait 2 seconds for Search2.");
	   }
	    await driver.findElement(By.id("action")).click(); 
            await new Promise(r => setTimeout(r, 2000));
	    if ((await driver.findElements(By.linkText("Recover from Field"))).length != 0)  // If build was deployed
	    {
	       await driver.findElement(By.linkText("Recover from Field")).click();
               await driver.findElement(By.css(".controls > .btn")).click(); 
	    
	       while ((await driver.findElements(By.id("action"))).length == 0)
	      {
	         await new Promise(r => setTimeout(r, 2000));
	         console.log("Wait 2 seconds for Search2.");
	      }
               await driver.findElement(By.id("action")).click(); 
	       await driver.findElement(By.linkText("End Deployment")).click();
               await driver.findElement(By.css(".controls > .btn")).click(); 
            }

	    while ((await driver.findElements(By.linkText("Retire Build"))).length == 0)
	    {
	      await new Promise(r => setTimeout(r, 2000));
	      console.log("Wait 2 seconds for End Deployment.");
	    }
            await driver.findElement(By.linkText("Retire Build")).click();
	    while ((await driver.findElements(By.id("id_detail"))).length == 0)
	    {
	      await new Promise(r => setTimeout(r, 2000));
	      console.log("Wait 2 seconds for Retire Build.");
	    }
            await driver.findElement(By.id("id_detail")).click();
            await driver.findElement(By.id("id_detail")).sendKeys("Retiring for automated testing.");
            //await driver.findElement(By.css(".controls > .btn")).click(); 
            await driver.findElement(By.css(".controls > .btn-primary")).click(); 
	}
	else
	    console.log("Retire Builds Failed: Build not found");

        // Close browser window
        driver.quit();

    }
    catch (e) {
        console.log(e.message, e.stack);
        console.log("Retire Builds failed.");
	return 1;
    }
    console.log("Retire Builds completed.")
    return 0;

})();
